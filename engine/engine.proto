syntax = "proto3";

import "google/protobuf/empty.proto";
import "types/types.proto";

package engine;

option go_package = "./engine;engine";

message EnginePreparePayloadRequest {
    types.H256 parentHash = 1;
    uint64 timestamp = 2;
    types.H256 random = 3;
    types.H160 feeRecipient = 4; 
}
  
message EnginePreparePayloadReply { uint64 payloadId = 1; }

message EngineGetPayloadRequest { uint64 payloadId = 1; }

message EngineExecutePayloadReply { string status = 1; }

message EngineForkChoiceUpdatedRequest {
    types.H256 headBlockHash = 1;
    types.H256 finalizedBlockHash = 2;
}

message EngineForkChoiceUpdatedReply {}

// "The Merge" RPC Requests to be netively implemented in the Erigon Node Backend
service Engine {
  // Prepare Execution Payload
  rpc EnginePreparePayload(EnginePreparePayloadRequest) returns (EnginePreparePayloadReply);

  // Fetch Execution Payload using its id.
  rpc EngineGetPayload(EngineGetPayloadRequest) returns (types.ExecutionPayload);

  // Execute the payload.
  rpc EngineExecutePayload(types.ExecutionPayload) returns (EngineExecutePayloadReply);

  // Update fork choice
  rpc EngineForkChoiceUpdated(EngineForkChoiceUpdatedRequest) returns (EngineForkChoiceUpdatedReply);
  
}
